crtl + shift + p = Command palette in visual studio 
Rust Analyser: Debug

Type in: 
settings.json
-> Adjust stuff

https://blog.logrocket.com/json-and-rust-why-serde_json-is-the-top-choice/

Object {"contents": 
Array [Object {"contents": 
    Array [Object {"contents": 
        Array [Object {"error": String("error opening dir")}], "name": String("efi"), "type": String("directory")}, 
        Object {"contents": Array 
        [Object {"contents": Array [], "name": String("fonts"), "type": String("directory")}, Object {"contents": Array [], "name": String("locale"), "type": String("directory")}, Object {"contents": Array [], "name": String("themes"), "type": String("directory")}, Object {"contents": Array [], "name": String("x86_64-efi"), "type": String("directory")}], "name": String("grub"), "type": String("directory")}, Object {"contents": Array [], "name": String("memtest86+"), "type": String("directory")}], "name": String("boot"), "type": String("directory")}], "name": String("/"), "type": String("directory")}







              {"type":"directory","name":"efi","contents":[{"error": "error opening dir"}
  ]},

Converter:
  https://transform.tools/json-to-rust-serde

SerdeDoku:
https://serde.rs/data-model.html


aabb instancing with cubes: 
https://github.com/ForesightMiningSoftwareCorporation/bevy_aabb_instancings

//==================================================================================================================================================\\

Update to Bevy 0.11 / 

Give Every Inode / Filenamelocation their own Transformation matrix? 
Liesse sich daraus nicht mittels maus raycast durch die inverse der transformation die momentan gepickte position bestimmen? 

Eine Transformationsmatrix vom ursprung aus? 

Gebildet aus Zusammenhaengen der Dateistruktur


#[derive(Debug)]
The compiler is capable of providing basic implementations for some traits via the #[derive] attribute. These traits can still be manually implemented if a more complex behavior is required.

The following is a list of derivable traits:

    Comparison traits: Eq, PartialEq, Ord, PartialOrd.
    Clone, to create T from &T via a copy.
    Copy, to give a type 'copy semantics' instead of 'move semantics'.
    Hash, to compute a hash from &T.
    Default, to create an empty instance of a data type.
    Debug, to format a value using the {:?} formatter.


If it takes more than a frame to generate a mesh, you can use an asynchronous task or a separate thread and an Arc<Mutex<T>> resource.

Next ToDos: 

    1.
    Let it groow! 
        Kombination aus Lindenmayer, Metadata und Relativerdateilocation(Tiefe im System, Dir or File etc.)
    
    2.
    Find a way to put text on a texture and map the uv data or use one of the text3dlibrarys and check performance.

//////////////////////////////////////////
18.09.2023
Every "main"- subfolder as their own mesh to manipulate and iterate with less delay?

09.02.2024
Baustellen:
Octree - Sphere Clicking test 
Mesh Subfolder splitting
Treegeneration generalis
Vertexcolourmarkings for metadata?
Letter prerender / shader split / number split ? 

29.04.2024
Tidy up code! 
Display BoundingSphere PathTitles calculated after every movement of the camera
Merge update_scale & pick_nodes into process_inputs_system

31.05.2024
Todos: 
\1 Node Display names needs fixing, don't dislplay them from behind
\2 List files only stays a fleeting moment cause its bound to node names
\3 Parametericed names for different trees would be nice, with internal respawn to generate new visualisations on the fly
\4 the look to function needs a stable UP vector, depending von previous movement, idea still missing here
/5 Write Thesis




Tubes:
if branches[index].depth <= 1 {
            scale = 10.;
            extending_factor = 20 * scale as i32;
            spiral_transform.translation.y = 0.5 * scale * 10.;//* scale;
            spiral_transform.translation.z = 0.333 * scale * 1000.;// * scale;
            spiral_transform.rotate_y(PI/16.);
            // spiral_transform.rotate_y(1.*PI/(index as f32+0.1) as f32);
        }
        else if branches[index].depth <= 2 {
            scale = 5.;
            extending_factor = 20 * scale as i32;
            spiral_transform.translation.y = 0.5 * scale ;//* scale;
            spiral_transform.translation.z = 0.333 * scale * 100.;// * scale;
            spiral_transform.rotate_y(PI/16.);
            // spiral_transform.rotate_y(1.*PI/(index as f32+0.1) as f32);
        }
        else if branches[index].depth <= 3 {
            scale = 2.;
            extending_factor = 20 * scale as i32;
            spiral_transform.translation.y = 0.5 * scale;//* scale;
            spiral_transform.translation.z = 0.333 * scale * 10.;// * scale;
            spiral_transform.rotate_y(PI/16.);
            // spiral_transform.rotate_y(1.*PI/(index as f32+0.1) as f32);
        }
        // if false {}
        else { // "Natural"
            extending_factor = 10 ;
            scale = 1.;
            spiral_transform.translation.y = 1.0   *2.;//* scale;
            spiral_transform.translation.z = 0.333 *2.;// * scale;
            // spiral_transform.rotate_y(PI/16.);
            spiral_transform.rotate_y(4.*PI/(index as f32+0.5) as f32);
            // spiral_transform.rotate_z(4.*PI/(index as f32+0.5) as f32);
        }
